generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("USER")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  comments      Comment[]
  media         Media[]
  posts         Post[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id              String         @id @default(cuid())
  title           String
  slug            String         @unique
  content         String
  excerpt         String?
  featuredImage   String?
  status          String         @default("DRAFT")
  publishedAt     DateTime?
  metaDescription String?
  metaKeywords    String?
  locale          String         @default("en")
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  authorId        String
  categories      CategoryPost[]
  comments        Comment[]
  author          User           @relation(fields: [authorId], references: [id])
}

model Category {
  id          String         @id @default(cuid())
  name        String
  slug        String         @unique
  description String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  posts       CategoryPost[]
}

model CategoryPost {
  postId     String
  categoryId String
  assignedAt DateTime @default(now())
  category   Category @relation(fields: [categoryId], references: [id])
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([postId, categoryId])
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  postId    String
  userId    String
  parentId  String?
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Footer {
  id          String       @id @default(cuid())
  content     String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  siteSetting SiteSetting?
}

model Navbar {
  id          String       @id @default(cuid())
  links       Json
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  siteSetting SiteSetting?
}

model Banner {
  id        String   @id @default(cuid())
  title     String
  imageUrl  String
  link      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SiteSetting {
  id              String   @id @default(cuid())
  title           String   @default("My Blog")
  description     String   @default("A blog built with Next.js")
  logo            String?
  favicon         String?
  socialFacebook  String?
  socialTwitter   String?
  socialInstagram String?
  socialLinkedIn  String?
  socialGithub    String?
  footerText      String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  footerId        String?  @unique
  navbarId        String?  @unique
  contactEmail    String?
  contactPhone    String?
  navbar          Navbar?  @relation(fields: [navbarId], references: [id])
  footer          Footer?  @relation(fields: [footerId], references: [id])
}

model Media {
  id           String   @id @default(cuid())
  filename     String
  url          String
  thumbnailUrl String?
  size         Int
  width        Int
  height       Int
  type         String
  alt          String?
  createdAt    DateTime @default(now())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
