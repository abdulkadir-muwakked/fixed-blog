{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/middleware.ts"],"sourcesContent":["//middleware.ts\nimport { NextResponse } from \"next/server\";\nimport { withAuth } from \"next-auth/middleware\";\n\n// Temporarily disable middleware by commenting out the export\n// export default withAuth(\n//   async function middleware(req) {\n//     console.log(\"Request path:\", req.nextUrl.pathname);\n\n//     if (!req.nextUrl.origin) {\n//       console.error(\"Request origin is missing\");\n//       return NextResponse.json({ error: \"Request origin is missing\" }, { status: 400 });\n//     }\n\n//     // تجاهل طلبات API والملفات الثابتة\n//     if (\n//       req.nextUrl.pathname.startsWith(\"/api\") ||\n//       req.nextUrl.pathname.startsWith(\"/_next\") ||\n//       req.nextUrl.pathname.includes(\".\")\n//     ) {\n//       console.log(\"Request is for API or static file, continuing...\");\n//       return NextResponse.next();\n//     }\n\n//     // التحقق من الحاجة للإعداد فقط للمسارات غير العامة\n//     if (![\"/setup\", \"/login\", \"/register\"].includes(req.nextUrl.pathname)) {\n//       try {\n//         console.log(\"Checking setup status...\");\n//         const setupCheck = await fetch(\n//           new URL(\"/api/auth/setup\", req.nextUrl.origin)\n//         );\n//         const { setupRequired } = await setupCheck.json();\n//         console.log(\"Setup required:\", setupRequired);\n\n//         if (setupRequired && req.nextUrl.pathname !== \"/setup\") {\n//           console.log(\"Redirecting to /setup...\");\n//           return NextResponse.redirect(new URL(\"/setup\", req.nextUrl.origin));\n//         }\n//       } catch (error) {\n//         console.error(\"Setup check failed:\", error);\n//       }\n//     }\n\n//     // لا تقم بإعادة التوجيه إلى صفحة login حتى لو كان هناك مستخدم ADMIN\n//     if (req.nextUrl.pathname === \"/setup\") {\n//       console.log(\"Allowing access to /setup...\");\n//       return NextResponse.next(); // إبقاء المستخدم في صفحة setup\n//     }\n\n//     // Restrict access to dashboard for admins only\n//     if (req.nextUrl.pathname.startsWith(\"/dashboard\")) {\n//       const token = req.cookies.get(\"next-auth.session-token\")?.value; // Access the value property of the cookie\n\n//       if (!token) {\n//         console.log(\"No token found, redirecting to login...\");\n//         return NextResponse.redirect(new URL(\"/login\", req.nextUrl.origin));\n//       }\n\n//       try {\n//         const user = JSON.parse(atob(token.split(\".\")[1])); // Decode JWT payload\n\n//         // Check if the user exists in the database\n//         const userExists = await fetch(\n//           new URL(\"/api/users/admins\", req.nextUrl.origin),\n//           {\n//             method: \"POST\",\n//             headers: { \"Content-Type\": \"application/json\" },\n//             body: JSON.stringify({ email: user.email }),\n//           }\n//         ).then((res) => res.json());\n\n//         if (!userExists.exists) {\n//           console.log(\n//             \"User does not exist in the database, redirecting to login...\"\n//           );\n//           return NextResponse.redirect(new URL(\"/login\", req.nextUrl.origin));\n//         }\n\n//         if (user.role !== \"ADMIN\") {\n//           console.log(\"User is not an admin, redirecting to login...\");\n//           return NextResponse.redirect(new URL(\"/login\", req.nextUrl.origin));\n//         }\n//       } catch (error) {\n//         console.error(\"Failed to decode token or check user existence:\", error);\n//         return NextResponse.redirect(new URL(\"/login\", req.nextUrl.origin));\n//       }\n//     }\n\n//     console.log(\"Proceeding to next page...\");\n//     return NextResponse.next();\n//   },\n//   {\n//     callbacks: {\n//       authorized: ({ token }) => !!token,\n//     },\n//     pages: {\n//       signIn: \"/login\",\n//       error: \"/login\",\n//     },\n//   }\n// );\n\n// export const config = {\n//   matcher: [\"/((?!api|_next/static|_next/image|favicon.ico).*)\"],\n// };\n"],"names":[],"mappings":"AAAA,eAAe;;;CAIf,8DAA8D;CAC9D,2BAA2B;CAC3B,qCAAqC;CACrC,0DAA0D;CAE1D,iCAAiC;CACjC,oDAAoD;CACpD,2FAA2F;CAC3F,QAAQ;CAER,0CAA0C;CAC1C,WAAW;CACX,mDAAmD;CACnD,qDAAqD;CACrD,2CAA2C;CAC3C,UAAU;CACV,yEAAyE;CACzE,oCAAoC;CACpC,QAAQ;CAER,0DAA0D;CAC1D,+EAA+E;CAC/E,cAAc;CACd,mDAAmD;CACnD,0CAA0C;CAC1C,2DAA2D;CAC3D,aAAa;CACb,6DAA6D;CAC7D,yDAAyD;CAEzD,oEAAoE;CACpE,qDAAqD;CACrD,iFAAiF;CACjF,YAAY;CACZ,0BAA0B;CAC1B,uDAAuD;CACvD,UAAU;CACV,QAAQ;CAER,2EAA2E;CAC3E,+CAA+C;CAC/C,qDAAqD;CACrD,oEAAoE;CACpE,QAAQ;CAER,sDAAsD;CACtD,2DAA2D;CAC3D,oHAAoH;CAEpH,sBAAsB;CACtB,kEAAkE;CAClE,+EAA+E;CAC/E,UAAU;CAEV,cAAc;CACd,oFAAoF;CAEpF,sDAAsD;CACtD,0CAA0C;CAC1C,8DAA8D;CAC9D,cAAc;CACd,8BAA8B;CAC9B,+DAA+D;CAC/D,2DAA2D;CAC3D,cAAc;CACd,uCAAuC;CAEvC,oCAAoC;CACpC,yBAAyB;CACzB,6EAA6E;CAC7E,eAAe;CACf,iFAAiF;CACjF,YAAY;CAEZ,uCAAuC;CACvC,0EAA0E;CAC1E,iFAAiF;CACjF,YAAY;CACZ,0BAA0B;CAC1B,mFAAmF;CACnF,+EAA+E;CAC/E,UAAU;CACV,QAAQ;CAER,iDAAiD;CACjD,kCAAkC;CAClC,OAAO;CACP,MAAM;CACN,mBAAmB;CACnB,4CAA4C;CAC5C,SAAS;CACT,eAAe;CACf,0BAA0B;CAC1B,yBAAyB;CACzB,SAAS;CACT,MAAM;CACN,KAAK;CAEL,0BAA0B;CAC1B,oEAAoE;CACpE,KAAK"}}]
}