{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/pc/Desktop/fixed-blog%20-%20Copy/src/lib/db/index.ts"],"sourcesContent":["/**\n * @File: src/lib/db/index.ts\n */\n\nimport { PrismaClient } from \"@prisma/client\";\n\nconst prisma = new PrismaClient();\n\nexport async function fetchCategories() {\n  console.log(\"Fetching categories from database...\");\n  const result = await prisma.category.findMany();\n  console.log(\"Fetched categories:\", result);\n  return result;\n}\n\nexport async function testPostTable() {\n  try {\n    console.log(\"Testing posts table...\");\n    const result = await prisma.post.findMany();\n    console.log(\"Posts table data:\", result);\n  } catch (error) {\n    console.error(\"Error querying posts table:\", error);\n  }\n}\n\nexport async function verifyPostTable() {\n  try {\n    console.log(\"Verifying posts table...\");\n    const result = await prisma.post.findMany();\n    console.log(\"Posts table data:\", result);\n  } catch (error) {\n    console.error(\"Error querying posts table:\", error);\n  }\n}\n\nexport default prisma;\n"],"names":[],"mappings":"AAAA;;CAEC;;;;;;AAED;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAExB,eAAe;IACpB,QAAQ,GAAG,CAAC;IACZ,MAAM,SAAS,MAAM,OAAO,QAAQ,CAAC,QAAQ;IAC7C,QAAQ,GAAG,CAAC,uBAAuB;IACnC,OAAO;AACT;AAEO,eAAe;IACpB,IAAI;QACF,QAAQ,GAAG,CAAC;QACZ,MAAM,SAAS,MAAM,OAAO,IAAI,CAAC,QAAQ;QACzC,QAAQ,GAAG,CAAC,qBAAqB;IACnC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;IAC/C;AACF;AAEO,eAAe;IACpB,IAAI;QACF,QAAQ,GAAG,CAAC;QACZ,MAAM,SAAS,MAAM,OAAO,IAAI,CAAC,QAAQ;QACzC,QAAQ,GAAG,CAAC,qBAAqB;IACnC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;IAC/C;AACF;uCAEe","debugId":null}},
    {"offset": {"line": 117, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/pc/Desktop/fixed-blog%20-%20Copy/src/lib/db/schema.ts"],"sourcesContent":["/**\n * @File: src/lib/db/schema.ts\n */\n\n// Prisma schema definitions are now managed in the `prisma/schema.prisma` file.\n// Removed Drizzle-based schema definitions and relationships.\n"],"names":[],"mappings":"AAAA;;CAEC,GAED,gFAAgF;AAChF,8DAA8D","debugId":null}},
    {"offset": {"line": 127, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/pc/Desktop/fixed-blog%20-%20Copy/src/app/api/categories/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport { db } from \"@/lib/db\";\r\nimport { nanoid } from \"nanoid\";\r\nimport { categories } from \"@/lib/db/schema\";\r\n\r\nexport async function GET() {\r\n  try {\r\n    const categoriesList = await db.select().from(categories);\r\n    return NextResponse.json(categoriesList);\r\n  } catch (error) {\r\n    return NextResponse.json(\r\n      { error: \"Failed to fetch categories\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function POST(req: Request) {\r\n  try {\r\n    const { name, slug } = await req.json();\r\n\r\n    if (!name) {\r\n      return NextResponse.json({ error: \"Name is required\" }, { status: 400 });\r\n    }\r\n\r\n    const newCategory = {\r\n      id: nanoid(),\r\n      name,\r\n      slug:\r\n        slug ||\r\n        name\r\n          .toLowerCase()\r\n          .replace(/[^a-z0-9]+/g, \"-\")\r\n          .replace(/(^-|-$)+/g, \"\"),\r\n    };\r\n\r\n    await db.insert(categories).values(newCategory);\r\n\r\n    return NextResponse.json(newCategory);\r\n  } catch (error) {\r\n    return NextResponse.json(\r\n      { error: \"Failed to create category\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;;;;;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,iBAAiB,MAAM,2HAAA,CAAA,KAAE,CAAC,MAAM,GAAG,IAAI,CAAC,4HAAA,CAAA,aAAU;QACxD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA6B,GACtC;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,IAAI;QAErC,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAmB,GAAG;gBAAE,QAAQ;YAAI;QACxE;QAEA,MAAM,cAAc;YAClB,IAAI,CAAA,GAAA,iJAAA,CAAA,SAAM,AAAD;YACT;YACA,MACE,QACA,KACG,WAAW,GACX,OAAO,CAAC,eAAe,KACvB,OAAO,CAAC,aAAa;QAC5B;QAEA,MAAM,2HAAA,CAAA,KAAE,CAAC,MAAM,CAAC,4HAAA,CAAA,aAAU,EAAE,MAAM,CAAC;QAEnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA4B,GACrC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}