{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/pc/Desktop/fixed-blog%20-%20Copy/src/lib/db/index.ts"],"sourcesContent":["/**\n * @File: src/lib/db/index.ts\n */\n\nimport { PrismaClient } from \"@prisma/client\";\n\nconst prisma = new PrismaClient();\n\nexport async function fetchCategories() {\n  console.log(\"Fetching categories from database...\");\n  const result = await prisma.category.findMany();\n  console.log(\"Fetched categories:\", result);\n  return result;\n}\n\nexport async function testPostTable() {\n  try {\n    console.log(\"Testing posts table...\");\n    const result = await prisma.post.findMany();\n    console.log(\"Posts table data:\", result);\n  } catch (error) {\n    console.error(\"Error querying posts table:\", error);\n  }\n}\n\nexport async function verifyPostTable() {\n  try {\n    console.log(\"Verifying posts table...\");\n    const result = await prisma.post.findMany();\n    console.log(\"Posts table data:\", result);\n  } catch (error) {\n    console.error(\"Error querying posts table:\", error);\n  }\n}\n\nexport default prisma;\n"],"names":[],"mappings":"AAAA;;CAEC;;;;;;AAED;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAExB,eAAe;IACpB,QAAQ,GAAG,CAAC;IACZ,MAAM,SAAS,MAAM,OAAO,QAAQ,CAAC,QAAQ;IAC7C,QAAQ,GAAG,CAAC,uBAAuB;IACnC,OAAO;AACT;AAEO,eAAe;IACpB,IAAI;QACF,QAAQ,GAAG,CAAC;QACZ,MAAM,SAAS,MAAM,OAAO,IAAI,CAAC,QAAQ;QACzC,QAAQ,GAAG,CAAC,qBAAqB;IACnC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;IAC/C;AACF;AAEO,eAAe;IACpB,IAAI;QACF,QAAQ,GAAG,CAAC;QACZ,MAAM,SAAS,MAAM,OAAO,IAAI,CAAC,QAAQ;QACzC,QAAQ,GAAG,CAAC,qBAAqB;IACnC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;IAC/C;AACF;uCAEe","debugId":null}},
    {"offset": {"line": 102, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/pc/Desktop/fixed-blog%20-%20Copy/src/app/api/categories/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport { nanoid } from \"nanoid\";\r\nimport prisma from \"@/lib/db\";\r\n\r\nexport async function GET() {\r\n  try {\r\n    const categories = await prisma.category.findMany({\r\n      orderBy: { name: \"asc\" },\r\n    });\r\n\r\n    return new Response(JSON.stringify(categories), {\r\n      status: 200,\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error fetching categories:\", error);\r\n    return new Response(\r\n      JSON.stringify({ error: \"Failed to fetch categories\" }),\r\n      {\r\n        status: 500,\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function POST(req: Request) {\r\n  try {\r\n    const { name, slug } = await req.json();\r\n\r\n    if (!name) {\r\n      return new Response(JSON.stringify({ error: \"Name is required\" }), {\r\n        status: 400,\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n      });\r\n    }\r\n\r\n    const newCategory = await prisma.category.create({\r\n      data: {\r\n        name,\r\n        slug:\r\n          slug ||\r\n          name\r\n            .toLowerCase()\r\n            .replace(/[^a-z0-9]+/g, \"-\")\r\n            .replace(/(^-|-$)+/g, \"\"),\r\n      },\r\n    });\r\n\r\n    return new Response(JSON.stringify(newCategory), {\r\n      status: 201,\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error creating category:\", error);\r\n    return new Response(\r\n      JSON.stringify({ error: \"Failed to create category\" }),\r\n      {\r\n        status: 500,\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n      }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;AAEA;;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,aAAa,MAAM,2HAAA,CAAA,UAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC;YAChD,SAAS;gBAAE,MAAM;YAAM;QACzB;QAEA,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC,aAAa;YAC9C,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAChD;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;YAAE,OAAO;QAA6B,IACrD;YACE,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAChD;IAEJ;AACF;AAEO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,IAAI;QAErC,IAAI,CAAC,MAAM;YACT,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;gBAAE,OAAO;YAAmB,IAAI;gBACjE,QAAQ;gBACR,SAAS;oBAAE,gBAAgB;gBAAmB;YAChD;QACF;QAEA,MAAM,cAAc,MAAM,2HAAA,CAAA,UAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;YAC/C,MAAM;gBACJ;gBACA,MACE,QACA,KACG,WAAW,GACX,OAAO,CAAC,eAAe,KACvB,OAAO,CAAC,aAAa;YAC5B;QACF;QAEA,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC,cAAc;YAC/C,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAChD;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;YAAE,OAAO;QAA4B,IACpD;YACE,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAChD;IAEJ;AACF","debugId":null}}]
}