{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/pc/Desktop/fixed-blog%20-%20Copy/src/lib/db/index.ts"],"sourcesContent":["/**\n * @File: src/lib/db/index.ts\n */\n\nimport { PrismaClient } from \"@prisma/client\";\n\nconst prisma = new PrismaClient();\n\nexport async function fetchCategories() {\n  console.log(\"Fetching categories from database...\");\n  const result = await prisma.category.findMany();\n  console.log(\"Fetched categories:\", result);\n  return result;\n}\n\nexport async function testPostTable() {\n  try {\n    console.log(\"Testing posts table...\");\n    const result = await prisma.post.findMany();\n    console.log(\"Posts table data:\", result);\n  } catch (error) {\n    console.error(\"Error querying posts table:\", error);\n  }\n}\n\nexport async function verifyPostTable() {\n  try {\n    console.log(\"Verifying posts table...\");\n    const result = await prisma.post.findMany();\n    console.log(\"Posts table data:\", result);\n  } catch (error) {\n    console.error(\"Error querying posts table:\", error);\n  }\n}\n\nexport default prisma;\n"],"names":[],"mappings":"AAAA;;CAEC;;;;;;AAED;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAExB,eAAe;IACpB,QAAQ,GAAG,CAAC;IACZ,MAAM,SAAS,MAAM,OAAO,QAAQ,CAAC,QAAQ;IAC7C,QAAQ,GAAG,CAAC,uBAAuB;IACnC,OAAO;AACT;AAEO,eAAe;IACpB,IAAI;QACF,QAAQ,GAAG,CAAC;QACZ,MAAM,SAAS,MAAM,OAAO,IAAI,CAAC,QAAQ;QACzC,QAAQ,GAAG,CAAC,qBAAqB;IACnC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;IAC/C;AACF;AAEO,eAAe;IACpB,IAAI;QACF,QAAQ,GAAG,CAAC;QACZ,MAAM,SAAS,MAAM,OAAO,IAAI,CAAC,QAAQ;QACzC,QAAQ,GAAG,CAAC,qBAAqB;IACnC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;IAC/C;AACF;uCAEe","debugId":null}},
    {"offset": {"line": 110, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/pc/Desktop/fixed-blog%20-%20Copy/src/lib/auth/service.ts"],"sourcesContent":["/**\n * @File: src/lib/auth/service.ts\n */\n\nimport prisma from \"../db\";\nimport bcrypt from \"bcryptjs\";\nimport { z } from \"zod\";\n\nexport async function registerUser(data: {\n  name: string;\n  email: string;\n  password: string;\n}) {\n  const hashedPassword = await bcrypt.hash(data.password, 10);\n\n  const newUser = await prisma.user.create({\n    data: {\n      name: data.name,\n      email: data.email,\n      password: hashedPassword,\n    },\n  });\n\n  return newUser;\n}\n\nexport async function getUserByEmail(email: string) {\n  const user = await prisma.user.findUnique({ where: { email } });\n  return user;\n}\n\nexport async function updateUser(\n  userId: string,\n  data: { name?: string; email?: string; password?: string }\n) {\n  const updateData: Partial<{ name: string; email: string; password: string }> =\n    {};\n\n  if (data.name) updateData.name = data.name;\n  if (data.email) updateData.email = data.email;\n  if (data.password) updateData.password = await bcrypt.hash(data.password, 10);\n\n  const updatedUser = await prisma.user.update({\n    where: { id: userId },\n    data: updateData,\n  });\n  return updatedUser;\n}\n\nexport async function createRootAdmin(data: {\n  name: string;\n  email: string;\n  password: string;\n}) {\n  const adminExists = await prisma.user.findFirst({ where: { role: \"ADMIN\" } });\n\n  if (adminExists) {\n    throw new Error(\"Root admin already exists\");\n  }\n\n  const hashedPassword = await bcrypt.hash(data.password, 10);\n\n  const admin = await prisma.user.create({\n    data: {\n      name: data.name,\n      email: data.email,\n      password: hashedPassword,\n      role: \"ADMIN\",\n    },\n  });\n\n  return admin;\n}\n"],"names":[],"mappings":"AAAA;;CAEC;;;;;;AAED;AACA;;;AAGO,eAAe,aAAa,IAIlC;IACC,MAAM,iBAAiB,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,KAAK,QAAQ,EAAE;IAExD,MAAM,UAAU,MAAM,2HAAA,CAAA,UAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QACvC,MAAM;YACJ,MAAM,KAAK,IAAI;YACf,OAAO,KAAK,KAAK;YACjB,UAAU;QACZ;IACF;IAEA,OAAO;AACT;AAEO,eAAe,eAAe,KAAa;IAChD,MAAM,OAAO,MAAM,2HAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU,CAAC;QAAE,OAAO;YAAE;QAAM;IAAE;IAC7D,OAAO;AACT;AAEO,eAAe,WACpB,MAAc,EACd,IAA0D;IAE1D,MAAM,aACJ,CAAC;IAEH,IAAI,KAAK,IAAI,EAAE,WAAW,IAAI,GAAG,KAAK,IAAI;IAC1C,IAAI,KAAK,KAAK,EAAE,WAAW,KAAK,GAAG,KAAK,KAAK;IAC7C,IAAI,KAAK,QAAQ,EAAE,WAAW,QAAQ,GAAG,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,KAAK,QAAQ,EAAE;IAE1E,MAAM,cAAc,MAAM,2HAAA,CAAA,UAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QAC3C,OAAO;YAAE,IAAI;QAAO;QACpB,MAAM;IACR;IACA,OAAO;AACT;AAEO,eAAe,gBAAgB,IAIrC;IACC,MAAM,cAAc,MAAM,2HAAA,CAAA,UAAM,CAAC,IAAI,CAAC,SAAS,CAAC;QAAE,OAAO;YAAE,MAAM;QAAQ;IAAE;IAE3E,IAAI,aAAa;QACf,MAAM,IAAI,MAAM;IAClB;IAEA,MAAM,iBAAiB,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,KAAK,QAAQ,EAAE;IAExD,MAAM,QAAQ,MAAM,2HAAA,CAAA,UAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QACrC,MAAM;YACJ,MAAM,KAAK,IAAI;YACf,OAAO,KAAK,KAAK;YACjB,UAAU;YACV,MAAM;QACR;IACF;IAEA,OAAO;AACT","debugId":null}},
    {"offset": {"line": 188, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/pc/Desktop/fixed-blog%20-%20Copy/src/app/api/auth/setup/route.ts"],"sourcesContent":["/**\n * @File: src/app/api/auth/setup/route.ts\n */\n\nimport { createRootAdmin } from \"@/lib/auth/service\";\nimport prisma from \"@/lib/db\";\nimport { NextRequest, NextResponse } from \"next/server\";\nimport { z } from \"zod\";\nimport { User } from \"@prisma/client\"; // Import the User model from Prisma client\n\n// تعريف مخطط التحقق من صحة البيانات لإنشاء الجذر المسؤول\nconst setupSchema = z.object({\n  name: z.string().min(2, \"Name must be at least 2 characters\"),\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(8, \"Password must be at least 8 characters\"),\n});\n\n// التحقق مما إذا كان الإعداد مطلوبًا\n// Check if setup is required\nexport async function GET() {\n  try {\n    console.log(\"Checking if admin exists...\");\n    const adminCount = await prisma.user.count({\n      where: { role: \"ADMIN\" },\n    });\n\n    console.log(\"Admin exists:\", adminCount > 0);\n\n    return NextResponse.json({\n      setupRequired: adminCount === 0,\n    });\n  } catch (error) {\n    console.error(\"Setup check error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to check setup status\" },\n      { status: 500 }\n    );\n  }\n}\n\n// إنشاء حساب الجذر المسؤول\nexport async function POST(req: NextRequest) {\n  try {\n    const adminCount = await prisma.user.count({\n      where: { role: \"ADMIN\" },\n    });\n\n    if (adminCount > 0) {\n      return NextResponse.json(\n        { error: \"Setup has already been completed\" },\n        { status: 400 }\n      );\n    }\n\n    const body = await req.json();\n\n    const result = setupSchema.safeParse(body);\n\n    if (!result.success) {\n      return NextResponse.json(\n        { error: \"Invalid input\", details: result.error.flatten() },\n        { status: 400 }\n      );\n    }\n\n    await createRootAdmin(result.data);\n\n    return NextResponse.json(\n      { success: true, message: \"Root admin created successfully\" },\n      { status: 201 }\n    );\n  } catch (error) {\n    console.error(\"Root admin creation error:\", error);\n\n    if (\n      error instanceof Error &&\n      error.message === \"Root admin already exists\"\n    ) {\n      return NextResponse.json(\n        { error: \"Root admin already exists\" },\n        { status: 409 }\n      );\n    }\n\n    return NextResponse.json(\n      { error: \"Failed to create root admin\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"AAAA;;CAEC;;;;AAED;AACA;AACA;AACA;;;;;AAGA,yDAAyD;AACzD,MAAM,cAAc,sIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC3B,MAAM,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IACxB,OAAO,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK,CAAC;IACxB,UAAU,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;AAC9B;AAIO,eAAe;IACpB,IAAI;QACF,QAAQ,GAAG,CAAC;QACZ,MAAM,aAAa,MAAM,2HAAA,CAAA,UAAM,CAAC,IAAI,CAAC,KAAK,CAAC;YACzC,OAAO;gBAAE,MAAM;YAAQ;QACzB;QAEA,QAAQ,GAAG,CAAC,iBAAiB,aAAa;QAE1C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,eAAe,eAAe;QAChC;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,sBAAsB;QACpC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA+B,GACxC;YAAE,QAAQ;QAAI;IAElB;AACF;AAGO,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM,aAAa,MAAM,2HAAA,CAAA,UAAM,CAAC,IAAI,CAAC,KAAK,CAAC;YACzC,OAAO;gBAAE,MAAM;YAAQ;QACzB;QAEA,IAAI,aAAa,GAAG;YAClB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAmC,GAC5C;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,OAAO,MAAM,IAAI,IAAI;QAE3B,MAAM,SAAS,YAAY,SAAS,CAAC;QAErC,IAAI,CAAC,OAAO,OAAO,EAAE;YACnB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;gBAAiB,SAAS,OAAO,KAAK,CAAC,OAAO;YAAG,GAC1D;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,CAAA,GAAA,+HAAA,CAAA,kBAAe,AAAD,EAAE,OAAO,IAAI;QAEjC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAM,SAAS;QAAkC,GAC5D;YAAE,QAAQ;QAAI;IAElB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAE5C,IACE,iBAAiB,SACjB,MAAM,OAAO,KAAK,6BAClB;YACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA4B,GACrC;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA8B,GACvC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}