{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/pc/Desktop/fixed-blog%20-%20Copy/src/lib/db/index.ts"],"sourcesContent":["/**\n * @File: src/lib/db/index.ts\n */\n\nimport { PrismaClient } from \"@prisma/client\";\n\nconst prisma = new PrismaClient();\n\nexport async function fetchCategories() {\n  console.log(\"Fetching categories from database...\");\n  const result = await prisma.category.findMany();\n  console.log(\"Fetched categories:\", result);\n  return result;\n}\n\nexport async function testPostTable() {\n  try {\n    console.log(\"Testing posts table...\");\n    const result = await prisma.post.findMany();\n    console.log(\"Posts table data:\", result);\n  } catch (error) {\n    console.error(\"Error querying posts table:\", error);\n  }\n}\n\nexport async function verifyPostTable() {\n  try {\n    console.log(\"Verifying posts table...\");\n    const result = await prisma.post.findMany();\n    console.log(\"Posts table data:\", result);\n  } catch (error) {\n    console.error(\"Error querying posts table:\", error);\n  }\n}\n\nexport default prisma;\n"],"names":[],"mappings":"AAAA;;CAEC;;;;;;AAED;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAExB,eAAe;IACpB,QAAQ,GAAG,CAAC;IACZ,MAAM,SAAS,MAAM,OAAO,QAAQ,CAAC,QAAQ;IAC7C,QAAQ,GAAG,CAAC,uBAAuB;IACnC,OAAO;AACT;AAEO,eAAe;IACpB,IAAI;QACF,QAAQ,GAAG,CAAC;QACZ,MAAM,SAAS,MAAM,OAAO,IAAI,CAAC,QAAQ;QACzC,QAAQ,GAAG,CAAC,qBAAqB;IACnC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;IAC/C;AACF;AAEO,eAAe;IACpB,IAAI;QACF,QAAQ,GAAG,CAAC;QACZ,MAAM,SAAS,MAAM,OAAO,IAAI,CAAC,QAAQ;QACzC,QAAQ,GAAG,CAAC,qBAAqB;IACnC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;IAC/C;AACF;uCAEe","debugId":null}},
    {"offset": {"line": 110, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/pc/Desktop/fixed-blog%20-%20Copy/src/app/api/posts/route.ts"],"sourcesContent":["import prisma from \"@/lib/db\";\r\nimport { NextResponse } from \"next/server\";\r\n\r\n// Added missing imports for `getServerSession` and `authOptions`.\r\nimport { getServerSession } from \"next-auth\";\r\nimport { authOptions } from \"@/lib/auth/config\";\r\n\r\nexport async function GET() {\r\n  try {\r\n    const posts = await prisma.post.findMany({\r\n      include: {\r\n        categories: true,\r\n        author: {\r\n          select: { name: true, email: true },\r\n        },\r\n      },\r\n      orderBy: { createdAt: \"desc\" },\r\n    });\r\n    return NextResponse.json(posts);\r\n  } catch (error) {\r\n    return NextResponse.json(\r\n      { error: \"Failed to fetch posts\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// Updated the `POST` method to ensure all required fields are provided and validated before creating a post.\r\n\r\n// Added detailed error logging to identify the cause of the 500 Internal Server Error.\r\n\r\nexport async function POST(req: Request) {\r\n  try {\r\n    const body = await req.json();\r\n\r\n    console.log(\"Incoming request body:\", body); // Log the request body for debugging\r\n\r\n    if (!body.title || !body.content || !body.slug || !body.authorId) {\r\n      throw new Error(\r\n        \"Missing required fields: title, content, slug, or authorId\"\r\n      );\r\n    }\r\n\r\n    const categoryIds = Array.isArray(body.categoryIds) ? body.categoryIds : [];\r\n\r\n    // Validate that the authorId exists in the database\r\n    const authorExists = await prisma.user.findUnique({\r\n      where: { id: body.authorId },\r\n    });\r\n\r\n    if (!authorExists) {\r\n      throw new Error(\"Invalid authorId: User does not exist\");\r\n    }\r\n\r\n    const newPost = await prisma.post.create({\r\n      data: {\r\n        title: body.title,\r\n        content: body.content,\r\n        excerpt: body.excerpt || \"\",\r\n        slug: body.slug,\r\n        authorId: body.authorId,\r\n        categories: {\r\n          connect: categoryIds.map((id: string) => ({ id })), // Explicitly typed `id` as `string`\r\n        },\r\n      },\r\n    });\r\n\r\n    return NextResponse.json(newPost, { status: 201 });\r\n  } catch (error) {\r\n    console.error(\"Error creating post:\", error); // Log the error for debugging\r\n    const errorMessage =\r\n      error instanceof Error ? error.message : \"Unknown error\";\r\n    console.error(\"Error creating post:\", errorMessage);\r\n    return NextResponse.json(\r\n      { error: errorMessage || \"Failed to create post\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAMO,eAAe;IACpB,IAAI;QACF,MAAM,QAAQ,MAAM,2HAAA,CAAA,UAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;YACvC,SAAS;gBACP,YAAY;gBACZ,QAAQ;oBACN,QAAQ;wBAAE,MAAM;wBAAM,OAAO;oBAAK;gBACpC;YACF;YACA,SAAS;gBAAE,WAAW;YAAO;QAC/B;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF;AAMO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,OAAO,MAAM,IAAI,IAAI;QAE3B,QAAQ,GAAG,CAAC,0BAA0B,OAAO,qCAAqC;QAElF,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,OAAO,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,QAAQ,EAAE;YAChE,MAAM,IAAI,MACR;QAEJ;QAEA,MAAM,cAAc,MAAM,OAAO,CAAC,KAAK,WAAW,IAAI,KAAK,WAAW,GAAG,EAAE;QAE3E,oDAAoD;QACpD,MAAM,eAAe,MAAM,2HAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YAChD,OAAO;gBAAE,IAAI,KAAK,QAAQ;YAAC;QAC7B;QAEA,IAAI,CAAC,cAAc;YACjB,MAAM,IAAI,MAAM;QAClB;QAEA,MAAM,UAAU,MAAM,2HAAA,CAAA,UAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACvC,MAAM;gBACJ,OAAO,KAAK,KAAK;gBACjB,SAAS,KAAK,OAAO;gBACrB,SAAS,KAAK,OAAO,IAAI;gBACzB,MAAM,KAAK,IAAI;gBACf,UAAU,KAAK,QAAQ;gBACvB,YAAY;oBACV,SAAS,YAAY,GAAG,CAAC,CAAC,KAAe,CAAC;4BAAE;wBAAG,CAAC;gBAClD;YACF;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,SAAS;YAAE,QAAQ;QAAI;IAClD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB,QAAQ,8BAA8B;QAC5E,MAAM,eACJ,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAC3C,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO,gBAAgB;QAAwB,GACjD;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}