{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/pc/Desktop/fixed-blog%20-%20Copy/src/lib/db/index.ts"],"sourcesContent":["/**\n * @File: src/lib/db/index.ts\n */\n\nimport { PrismaClient } from \"@prisma/client\";\n\nconst prisma = new PrismaClient();\n\nexport async function fetchCategories() {\n  console.log(\"Fetching categories from database...\");\n  const result = await prisma.category.findMany();\n  console.log(\"Fetched categories:\", result);\n  return result;\n}\n\nexport async function testPostTable() {\n  try {\n    console.log(\"Testing posts table...\");\n    const result = await prisma.post.findMany();\n    console.log(\"Posts table data:\", result);\n  } catch (error) {\n    console.error(\"Error querying posts table:\", error);\n  }\n}\n\nexport async function verifyPostTable() {\n  try {\n    console.log(\"Verifying posts table...\");\n    const result = await prisma.post.findMany();\n    console.log(\"Posts table data:\", result);\n  } catch (error) {\n    console.error(\"Error querying posts table:\", error);\n  }\n}\n\nexport default prisma;\n"],"names":[],"mappings":"AAAA;;CAEC;;;;;;AAED;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAExB,eAAe;IACpB,QAAQ,GAAG,CAAC;IACZ,MAAM,SAAS,MAAM,OAAO,QAAQ,CAAC,QAAQ;IAC7C,QAAQ,GAAG,CAAC,uBAAuB;IACnC,OAAO;AACT;AAEO,eAAe;IACpB,IAAI;QACF,QAAQ,GAAG,CAAC;QACZ,MAAM,SAAS,MAAM,OAAO,IAAI,CAAC,QAAQ;QACzC,QAAQ,GAAG,CAAC,qBAAqB;IACnC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;IAC/C;AACF;AAEO,eAAe;IACpB,IAAI;QACF,QAAQ,GAAG,CAAC;QACZ,MAAM,SAAS,MAAM,OAAO,IAAI,CAAC,QAAQ;QACzC,QAAQ,GAAG,CAAC,qBAAqB;IACnC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;IAC/C;AACF;uCAEe","debugId":null}},
    {"offset": {"line": 109, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/pc/Desktop/fixed-blog%20-%20Copy/src/lib/db/schema.ts"],"sourcesContent":["/**\n * @File: src/lib/db/schema.ts\n */\n\n// Prisma schema definitions are now managed in the `prisma/schema.prisma` file.\n// Removed Drizzle-based schema definitions and relationships.\n"],"names":[],"mappings":"AAAA;;CAEC,GAED,gFAAgF;AAChF,8DAA8D","debugId":null}},
    {"offset": {"line": 127, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/pc/Desktop/fixed-blog%20-%20Copy/src/lib/utils.ts"],"sourcesContent":["/**\n * @File: src/lib/utils.ts\n */\n\n//src/lib/utils\nimport { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\nimport { customAlphabet } from \"nanoid\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\n// Create a custom ID generator with nanoid\nexport const createId = customAlphabet(\n  \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\",\n  12\n);\n"],"names":[],"mappings":"AAAA;;CAEC,GAED,eAAe;;;;;AACf;AACA;AACA;;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,6JAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,uIAAA,CAAA,OAAI,AAAD,EAAE;AACtB;AAGO,MAAM,WAAW,CAAA,GAAA,iJAAA,CAAA,iBAAc,AAAD,EACnC,kEACA","debugId":null}},
    {"offset": {"line": 150, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/pc/Desktop/fixed-blog%20-%20Copy/src/lib/auth/service.ts"],"sourcesContent":["/**\n * @File: src/lib/auth/service.ts\n */\n\nimport bcrypt from \"bcryptjs\";\nimport { db } from \"../db\";\nimport { users } from \"../db/schema\";\nimport { createId } from \"../utils\";\nimport { eq } from \"drizzle-orm\";\nimport type { InferInsertModel } from \"drizzle-orm\";\n\nexport type RegisterUserData = {\n  name: string;\n  email: string;\n  password: string;\n  role?: \"USER\" | \"ADMIN\"; // Add role as an optional parameter\n};\n\nexport type UpdateUserData = {\n  name?: string;\n  email?: string;\n  password?: string;\n  image?: string;\n};\n\nexport async function registerUser(userData: RegisterUserData) {\n  // Check if user already exists\n  const existingUser = await db\n    .select()\n    .from(users)\n    .where(eq(users.email, userData.email))\n    .then((res) => res[0]);\n\n  if (existingUser) {\n    throw new Error(\"User already exists\");\n  }\n\n  // Hash password\n  const hashedPassword = await bcrypt.hash(userData.password, 10);\n\n  // Create user\n  await db.insert(users).values({\n    id: createId(),\n    name: userData.name,\n    email: userData.email,\n    password: hashedPassword,\n    role: userData.role || \"USER\", // Use the provided role or default to USER\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  });\n\n  return { success: true };\n}\n\nexport async function updateUser(userId: string, userData: UpdateUserData) {\n  const updateData: Partial<InferInsertModel<typeof users>> = {\n    updatedAt: new Date(),\n  };\n\n  if (userData.name) updateData.name = userData.name;\n  if (userData.email) updateData.email = userData.email;\n  if (userData.image) updateData.image = userData.image;\n\n  if (userData.password) {\n    updateData.password = await bcrypt.hash(userData.password, 10);\n  }\n\n  await db.update(users).set(updateData).where(eq(users.id, userId));\n  return { success: true };\n}\n\nexport async function getUser(userId: string) {\n  const user = await db\n    .select({\n      id: users.id,\n      name: users.name,\n      email: users.email,\n      image: users.image,\n      role: users.role,\n      createdAt: users.createdAt,\n    })\n    .from(users)\n    .where(eq(users.id, userId))\n    .then((res) => res[0] || null);\n\n  return user;\n}\n\nexport async function getUserByEmail(email: string) {\n  const user = await db\n    .select({\n      id: users.id,\n      name: users.name,\n      email: users.email,\n      image: users.image,\n      role: users.role,\n      createdAt: users.createdAt,\n    })\n    .from(users)\n    .where(eq(users.email, email))\n    .then((res) => res[0] || null);\n\n  return user;\n}\n\nexport async function makeUserAdmin(userId: string) {\n  await db.update(users).set({ role: \"ADMIN\" }).where(eq(users.id, userId));\n  return { success: true };\n}\n\n// Add function to create first admin user (for initial setup)\nexport async function createRootAdmin(userData: RegisterUserData) {\n  // Check if any admin user already exists\n  const existingAdmin = await db\n    .select()\n    .from(users)\n    .where(eq(users.role, \"ADMIN\"))\n    .then((res) => res[0]);\n\n  if (existingAdmin) {\n    throw new Error(\"Root admin already exists\");\n  }\n\n  // Hash password\n  const hashedPassword = await bcrypt.hash(userData.password, 10);\n\n  // Create admin user\n  await db.insert(users).values({\n    id: createId(),\n    name: userData.name,\n    email: userData.email,\n    password: hashedPassword,\n    role: \"ADMIN\",\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  });\n\n  return { success: true };\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 273, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/pc/Desktop/fixed-blog%20-%20Copy/src/app/api/auth/setup/route.ts"],"sourcesContent":["/**\n * @File: src/app/api/auth/setup/route.ts\n */\n\nimport { createRootAdmin } from \"@/lib/auth/service\";\nimport prisma from \"@/lib/db\";\nimport { NextRequest, NextResponse } from \"next/server\";\nimport { z } from \"zod\";\nimport { User } from \"@prisma/client\"; // Import the User model from Prisma client\n\n// تعريف مخطط التحقق من صحة البيانات لإنشاء الجذر المسؤول\nconst setupSchema = z.object({\n  name: z.string().min(2, \"Name must be at least 2 characters\"),\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(8, \"Password must be at least 8 characters\"),\n});\n\n// التحقق مما إذا كان الإعداد مطلوبًا\n// Check if setup is required\nexport async function GET() {\n  try {\n    console.log(\"Checking if admin exists...\");\n    const adminCount = await prisma.user.count({\n      where: { role: \"ADMIN\" },\n    });\n\n    console.log(\"Admin exists:\", adminCount > 0);\n\n    return NextResponse.json({\n      setupRequired: adminCount === 0,\n    });\n  } catch (error) {\n    console.error(\"Setup check error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to check setup status\" },\n      { status: 500 }\n    );\n  }\n}\n\n// إنشاء حساب الجذر المسؤول\nexport async function POST(req: NextRequest) {\n  try {\n    const adminCount = await prisma.user.count({\n      where: { role: \"ADMIN\" },\n    });\n\n    if (adminCount > 0) {\n      return NextResponse.json(\n        { error: \"Setup has already been completed\" },\n        { status: 400 }\n      );\n    }\n\n    const body = await req.json();\n\n    const result = setupSchema.safeParse(body);\n\n    if (!result.success) {\n      return NextResponse.json(\n        { error: \"Invalid input\", details: result.error.flatten() },\n        { status: 400 }\n      );\n    }\n\n    await createRootAdmin(result.data);\n\n    return NextResponse.json(\n      { success: true, message: \"Root admin created successfully\" },\n      { status: 201 }\n    );\n  } catch (error) {\n    console.error(\"Root admin creation error:\", error);\n\n    if (\n      error instanceof Error &&\n      error.message === \"Root admin already exists\"\n    ) {\n      return NextResponse.json(\n        { error: \"Root admin already exists\" },\n        { status: 409 }\n      );\n    }\n\n    return NextResponse.json(\n      { error: \"Failed to create root admin\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"AAAA;;CAEC;;;;AAED;AACA;AACA;AACA;;;;;AAGA,yDAAyD;AACzD,MAAM,cAAc,sIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC3B,MAAM,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IACxB,OAAO,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK,CAAC;IACxB,UAAU,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;AAC9B;AAIO,eAAe;IACpB,IAAI;QACF,QAAQ,GAAG,CAAC;QACZ,MAAM,aAAa,MAAM,2HAAA,CAAA,UAAM,CAAC,IAAI,CAAC,KAAK,CAAC;YACzC,OAAO;gBAAE,MAAM;YAAQ;QACzB;QAEA,QAAQ,GAAG,CAAC,iBAAiB,aAAa;QAE1C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,eAAe,eAAe;QAChC;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,sBAAsB;QACpC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA+B,GACxC;YAAE,QAAQ;QAAI;IAElB;AACF;AAGO,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM,aAAa,MAAM,2HAAA,CAAA,UAAM,CAAC,IAAI,CAAC,KAAK,CAAC;YACzC,OAAO;gBAAE,MAAM;YAAQ;QACzB;QAEA,IAAI,aAAa,GAAG;YAClB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAmC,GAC5C;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,OAAO,MAAM,IAAI,IAAI;QAE3B,MAAM,SAAS,YAAY,SAAS,CAAC;QAErC,IAAI,CAAC,OAAO,OAAO,EAAE;YACnB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;gBAAiB,SAAS,OAAO,KAAK,CAAC,OAAO;YAAG,GAC1D;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,CAAA,GAAA,+HAAA,CAAA,kBAAe,AAAD,EAAE,OAAO,IAAI;QAEjC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAM,SAAS;QAAkC,GAC5D;YAAE,QAAQ;QAAI;IAElB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAE5C,IACE,iBAAiB,SACjB,MAAM,OAAO,KAAK,6BAClB;YACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA4B,GACrC;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA8B,GACvC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}