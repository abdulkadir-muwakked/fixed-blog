{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/pc/Desktop/fixed-blog%20-%20Copy/src/lib/auth/drizzle-adapter.ts"],"sourcesContent":["/**\n * @File: src/lib/auth/drizzle-adapter.ts\n */\n\nimport { PrismaClient } from \"@prisma/client\";\nimport type { Adapter, AdapterAccount, AdapterSession, AdapterUser, VerificationToken } from \"next-auth/adapters\";\n\nconst prisma = new PrismaClient();\n\nexport function PrismaAdapter(): Adapter {\n  return {\n    async createUser(userData: Omit<AdapterUser, \"id\">): Promise<AdapterUser> {\n      const user = await prisma.user.create({\n        data: userData,\n      });\n      return user;\n    },\n\n    async getUser(id: string): Promise<AdapterUser | null> {\n      return prisma.user.findUnique({ where: { id } });\n    },\n\n    async getUserByEmail(email: string): Promise<AdapterUser | null> {\n      return prisma.user.findUnique({ where: { email } });\n    },\n\n    async getUserByAccount({ providerAccountId, provider }: { providerAccountId: string; provider: string }): Promise<AdapterUser | null> {\n      const account = await prisma.account.findUnique({\n        where: { provider_providerAccountId: { provider, providerAccountId } },\n        include: { user: true },\n      });\n      return account?.user || null;\n    },\n\n    async updateUser(user: Partial<AdapterUser> & { id: string }): Promise<AdapterUser> {\n      return prisma.user.update({ where: { id: user.id }, data: user });\n    },\n\n    async deleteUser(userId: string): Promise<void> {\n      await prisma.user.delete({ where: { id: userId } });\n    },\n\n    async linkAccount(account: AdapterAccount): Promise<void> {\n      await prisma.account.create({ data: account });\n    },\n\n    async unlinkAccount({ providerAccountId, provider }: { providerAccountId: string; provider: string }): Promise<void> {\n      await prisma.account.delete({\n        where: { provider_providerAccountId: { provider, providerAccountId } },\n      });\n    },\n\n    async createSession(session: { sessionToken: string; userId: string; expires: Date }): Promise<AdapterSession> {\n      return prisma.session.create({ data: session });\n    },\n\n    async getSessionAndUser(sessionToken: string): Promise<{ session: AdapterSession; user: AdapterUser } | null> {\n      const session = await prisma.session.findUnique({\n        where: { sessionToken },\n        include: { user: true },\n      });\n      if (!session) return null;\n      return { session, user: session.user };\n    },\n\n    async updateSession(session: Partial<AdapterSession> & { sessionToken: string }): Promise<AdapterSession | null> {\n      return prisma.session.update({ where: { sessionToken: session.sessionToken }, data: session });\n    },\n\n    async deleteSession(sessionToken: string): Promise<void> {\n      await prisma.session.delete({ where: { sessionToken } });\n    },\n\n    async createVerificationToken(verificationToken: VerificationToken): Promise<VerificationToken> {\n      return prisma.verificationToken.create({ data: verificationToken });\n    },\n\n    async useVerificationToken({ identifier, token }: { identifier: string; token: string }): Promise<VerificationToken | null> {\n      const verificationToken = await prisma.verificationToken.findUnique({ where: { identifier_token: { identifier, token } } });\n      if (!verificationToken) return null;\n      await prisma.verificationToken.delete({ where: { identifier_token: { identifier, token } } });\n      return verificationToken;\n    },\n  };\n}\n"],"names":[],"mappings":"AAAA;;CAEC;;;AAED;;AAGA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAExB,SAAS;IACd,OAAO;QACL,MAAM,YAAW,QAAiC;YAChD,MAAM,OAAO,MAAM,OAAO,IAAI,CAAC,MAAM,CAAC;gBACpC,MAAM;YACR;YACA,OAAO;QACT;QAEA,MAAM,SAAQ,EAAU;YACtB,OAAO,OAAO,IAAI,CAAC,UAAU,CAAC;gBAAE,OAAO;oBAAE;gBAAG;YAAE;QAChD;QAEA,MAAM,gBAAe,KAAa;YAChC,OAAO,OAAO,IAAI,CAAC,UAAU,CAAC;gBAAE,OAAO;oBAAE;gBAAM;YAAE;QACnD;QAEA,MAAM,kBAAiB,EAAE,iBAAiB,EAAE,QAAQ,EAAmD;YACrG,MAAM,UAAU,MAAM,OAAO,OAAO,CAAC,UAAU,CAAC;gBAC9C,OAAO;oBAAE,4BAA4B;wBAAE;wBAAU;oBAAkB;gBAAE;gBACrE,SAAS;oBAAE,MAAM;gBAAK;YACxB;YACA,OAAO,SAAS,QAAQ;QAC1B;QAEA,MAAM,YAAW,IAA2C;YAC1D,OAAO,OAAO,IAAI,CAAC,MAAM,CAAC;gBAAE,OAAO;oBAAE,IAAI,KAAK,EAAE;gBAAC;gBAAG,MAAM;YAAK;QACjE;QAEA,MAAM,YAAW,MAAc;YAC7B,MAAM,OAAO,IAAI,CAAC,MAAM,CAAC;gBAAE,OAAO;oBAAE,IAAI;gBAAO;YAAE;QACnD;QAEA,MAAM,aAAY,OAAuB;YACvC,MAAM,OAAO,OAAO,CAAC,MAAM,CAAC;gBAAE,MAAM;YAAQ;QAC9C;QAEA,MAAM,eAAc,EAAE,iBAAiB,EAAE,QAAQ,EAAmD;YAClG,MAAM,OAAO,OAAO,CAAC,MAAM,CAAC;gBAC1B,OAAO;oBAAE,4BAA4B;wBAAE;wBAAU;oBAAkB;gBAAE;YACvE;QACF;QAEA,MAAM,eAAc,OAAgE;YAClF,OAAO,OAAO,OAAO,CAAC,MAAM,CAAC;gBAAE,MAAM;YAAQ;QAC/C;QAEA,MAAM,mBAAkB,YAAoB;YAC1C,MAAM,UAAU,MAAM,OAAO,OAAO,CAAC,UAAU,CAAC;gBAC9C,OAAO;oBAAE;gBAAa;gBACtB,SAAS;oBAAE,MAAM;gBAAK;YACxB;YACA,IAAI,CAAC,SAAS,OAAO;YACrB,OAAO;gBAAE;gBAAS,MAAM,QAAQ,IAAI;YAAC;QACvC;QAEA,MAAM,eAAc,OAA2D;YAC7E,OAAO,OAAO,OAAO,CAAC,MAAM,CAAC;gBAAE,OAAO;oBAAE,cAAc,QAAQ,YAAY;gBAAC;gBAAG,MAAM;YAAQ;QAC9F;QAEA,MAAM,eAAc,YAAoB;YACtC,MAAM,OAAO,OAAO,CAAC,MAAM,CAAC;gBAAE,OAAO;oBAAE;gBAAa;YAAE;QACxD;QAEA,MAAM,yBAAwB,iBAAoC;YAChE,OAAO,OAAO,iBAAiB,CAAC,MAAM,CAAC;gBAAE,MAAM;YAAkB;QACnE;QAEA,MAAM,sBAAqB,EAAE,UAAU,EAAE,KAAK,EAAyC;YACrF,MAAM,oBAAoB,MAAM,OAAO,iBAAiB,CAAC,UAAU,CAAC;gBAAE,OAAO;oBAAE,kBAAkB;wBAAE;wBAAY;oBAAM;gBAAE;YAAE;YACzH,IAAI,CAAC,mBAAmB,OAAO;YAC/B,MAAM,OAAO,iBAAiB,CAAC,MAAM,CAAC;gBAAE,OAAO;oBAAE,kBAAkB;wBAAE;wBAAY;oBAAM;gBAAE;YAAE;YAC3F,OAAO;QACT;IACF;AACF","debugId":null}},
    {"offset": {"line": 290, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/pc/Desktop/fixed-blog%20-%20Copy/src/lib/db/index.ts"],"sourcesContent":["/**\n * @File: src/lib/db/index.ts\n */\n\nimport { PrismaClient } from \"@prisma/client\";\n\nconst prisma = new PrismaClient();\n\nexport async function fetchCategories() {\n  console.log(\"Fetching categories from database...\");\n  const result = await prisma.category.findMany();\n  console.log(\"Fetched categories:\", result);\n  return result;\n}\n\nexport async function testPostTable() {\n  try {\n    console.log(\"Testing posts table...\");\n    const result = await prisma.post.findMany();\n    console.log(\"Posts table data:\", result);\n  } catch (error) {\n    console.error(\"Error querying posts table:\", error);\n  }\n}\n\nexport async function verifyPostTable() {\n  try {\n    console.log(\"Verifying posts table...\");\n    const result = await prisma.post.findMany();\n    console.log(\"Posts table data:\", result);\n  } catch (error) {\n    console.error(\"Error querying posts table:\", error);\n  }\n}\n\nexport default prisma;\n"],"names":[],"mappings":"AAAA;;CAEC;;;;;;AAED;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAExB,eAAe;IACpB,QAAQ,GAAG,CAAC;IACZ,MAAM,SAAS,MAAM,OAAO,QAAQ,CAAC,QAAQ;IAC7C,QAAQ,GAAG,CAAC,uBAAuB;IACnC,OAAO;AACT;AAEO,eAAe;IACpB,IAAI;QACF,QAAQ,GAAG,CAAC;QACZ,MAAM,SAAS,MAAM,OAAO,IAAI,CAAC,QAAQ;QACzC,QAAQ,GAAG,CAAC,qBAAqB;IACnC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;IAC/C;AACF;AAEO,eAAe;IACpB,IAAI;QACF,QAAQ,GAAG,CAAC;QACZ,MAAM,SAAS,MAAM,OAAO,IAAI,CAAC,QAAQ;QACzC,QAAQ,GAAG,CAAC,qBAAqB;IACnC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;IAC/C;AACF;uCAEe","debugId":null}},
    {"offset": {"line": 331, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/pc/Desktop/fixed-blog%20-%20Copy/src/lib/db/schema.ts"],"sourcesContent":["/**\n * @File: src/lib/db/schema.ts\n */\n\n// Prisma schema definitions are now managed in the `prisma/schema.prisma` file.\n// Removed Drizzle-based schema definitions and relationships.\n"],"names":[],"mappings":"AAAA;;CAEC,GAED,gFAAgF;AAChF,8DAA8D","debugId":null}},
    {"offset": {"line": 341, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/pc/Desktop/fixed-blog%20-%20Copy/src/lib/auth/config.ts"],"sourcesContent":["/**\n * @File: src/lib/auth/config.ts\n */\n\nimport type { NextAuthOptions } from \"next-auth\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport GithubProvider from \"next-auth/providers/github\";\nimport GoogleProvider from \"next-auth/providers/google\";\nimport bcrypt from \"bcryptjs\";\nimport { PrismaAdapter } from \"./drizzle-adapter\";\nimport prisma from \"@/lib/db\";\nimport { users } from \"@/lib/db/schema\";\nimport { eq } from \"drizzle-orm\";\n\nexport const authOptions: NextAuthOptions = {\n  debug: process.env.NODE_ENV === \"development\",\n  secret: process.env.NEXTAUTH_SECRET,\n  adapter: PrismaAdapter(),\n  session: {\n    strategy: \"jwt\",\n    maxAge: 30 * 24 * 60 * 60,\n  },\n  providers: [\n    GithubProvider({\n      clientId: process.env.GITHUB_CLIENT_ID || \"\",\n      clientSecret: process.env.GITHUB_CLIENT_SECRET || \"\",\n    }),\n    GoogleProvider({\n      clientId: process.env.GOOGLE_CLIENT_ID || \"\",\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET || \"\",\n    }),\n    CredentialsProvider({\n      name: \"credentials\",\n      credentials: {\n        email: { label: \"Email\", type: \"email\" },\n        password: { label: \"Password\", type: \"password\" },\n      },\n      async authorize(credentials) {\n        try {\n          if (!credentials?.email || !credentials?.password) {\n            throw new Error(\"Email and password are required\");\n          }\n\n          const user = await prisma\n            .select()\n            .from(users)\n            .where(eq(users.email, credentials.email))\n            .then((res) => res[0]);\n\n          if (!user) {\n            throw new Error(\"User not found\");\n          }\n\n          if (!user.password) {\n            throw new Error(\"User registered with OAuth\");\n          }\n\n          const isValid = await bcrypt.compare(\n            credentials.password,\n            user.password\n          );\n\n          if (!isValid) {\n            throw new Error(\"Invalid password\");\n          }\n\n          return {\n            id: user.id,\n            email: user.email,\n            name: user.name,\n            image: user.image,\n            role: user.role,\n          };\n        } catch (error) {\n          console.error(\"Authorization error:\", error);\n          return null;\n        }\n      },\n    }),\n  ],\n  callbacks: {\n    async jwt({ token, user }) {\n      console.log(token, user, \"authOptions\");\n\n      if (user) {\n        token.id = user.id;\n        token.role = user.role;\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      if (token?.id) session.user.id = token.id;\n      if (token?.role) session.user.role = token.role;\n      return session;\n    },\n  },\n  pages: {\n    signIn: \"/login\",\n    error: \"/login\",\n  },\n};\n"],"names":[],"mappings":"AAAA;;CAEC;;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AAEO,MAAM,cAA+B;IAC1C,OAAO,oDAAyB;IAChC,QAAQ,QAAQ,GAAG,CAAC,eAAe;IACnC,SAAS,CAAA,GAAA,0IAAA,CAAA,gBAAa,AAAD;IACrB,SAAS;QACP,UAAU;QACV,QAAQ,KAAK,KAAK,KAAK;IACzB;IACA,WAAW;QACT,CAAA,GAAA,qJAAA,CAAA,UAAc,AAAD,EAAE;YACb,UAAU,QAAQ,GAAG,CAAC,gBAAgB,IAAI;YAC1C,cAAc,QAAQ,GAAG,CAAC,oBAAoB,IAAI;QACpD;QACA,CAAA,GAAA,qJAAA,CAAA,UAAc,AAAD,EAAE;YACb,UAAU,QAAQ,GAAG,CAAC,gBAAgB,IAAI;YAC1C,cAAc,QAAQ,GAAG,CAAC,oBAAoB,IAAI;QACpD;QACA,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI;oBACF,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU;wBACjD,MAAM,IAAI,MAAM;oBAClB;oBAEA,MAAM,OAAO,MAAM,2HAAA,CAAA,UAAM,CACtB,MAAM,GACN,IAAI,CAAC,4HAAA,CAAA,QAAK,EACV,KAAK,CAAC,CAAA,GAAA,oKAAA,CAAA,KAAE,AAAD,EAAE,4HAAA,CAAA,QAAK,CAAC,KAAK,EAAE,YAAY,KAAK,GACvC,IAAI,CAAC,CAAC,MAAQ,GAAG,CAAC,EAAE;oBAEvB,IAAI,CAAC,MAAM;wBACT,MAAM,IAAI,MAAM;oBAClB;oBAEA,IAAI,CAAC,KAAK,QAAQ,EAAE;wBAClB,MAAM,IAAI,MAAM;oBAClB;oBAEA,MAAM,UAAU,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAClC,YAAY,QAAQ,EACpB,KAAK,QAAQ;oBAGf,IAAI,CAAC,SAAS;wBACZ,MAAM,IAAI,MAAM;oBAClB;oBAEA,OAAO;wBACL,IAAI,KAAK,EAAE;wBACX,OAAO,KAAK,KAAK;wBACjB,MAAM,KAAK,IAAI;wBACf,OAAO,KAAK,KAAK;wBACjB,MAAM,KAAK,IAAI;oBACjB;gBACF,EAAE,OAAO,OAAO;oBACd,QAAQ,KAAK,CAAC,wBAAwB;oBACtC,OAAO;gBACT;YACF;QACF;KACD;IACD,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,QAAQ,GAAG,CAAC,OAAO,MAAM;YAEzB,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,EAAE;gBAClB,MAAM,IAAI,GAAG,KAAK,IAAI;YACxB;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,OAAO,IAAI,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;YACzC,IAAI,OAAO,MAAM,QAAQ,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI;YAC/C,OAAO;QACT;IACF;IACA,OAAO;QACL,QAAQ;QACR,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 447, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/pc/Desktop/fixed-blog%20-%20Copy/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["/**\n * @File: src/app/api/auth/[...nextauth]/route.ts\n */\n\nimport NextAuth from \"next-auth\";\nimport { authOptions } from \"@/lib/auth/config\";\n\nconst handler = NextAuth(authOptions);\n\nexport { handler as GET, handler as POST };\n"],"names":[],"mappings":"AAAA;;CAEC;;;;AAED;AACA;;;AAEA,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE,8HAAA,CAAA,cAAW","debugId":null}}]
}